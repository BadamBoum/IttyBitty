/**********************************************************************************************
* This file is part of the Itty Bitty Arduino library.                                        *
* Credit for this font, however, goes to the BigCrystal Arduino library                       *
*	...which has been released to the Public Domain                                           *
*	SEE https://github.com/gregington/BigCrystal                                              *
* Copyright © 2016 Thomas J. Biuso III  ALL RIGHTS RESERVED...WHATEVER THAT MEANS.            *
* RELEASED UNDER THE GPL v3.0 LICENSE; SEE <LICENSE> FILE WITHIN DISTRIBUTION ROOT FOR TERMS. *
***********************************************************************************************/

#if !defined(ARDUINO) || defined(ITTYBITTY_BASE) || defined(NO_ITTYBITTY_LCD) || \
		defined(NO_ITTYBITTY_LCD_I2C) || defined(NO_ITTYBITTY_BIG)
	#define NO_ITTYBITTY_EXTENSIONS_BIG
#endif

#ifndef NO_ITTYBITTY_EXTENSIONS_BIG


#include "IttyBitty_LCD_I2C.h"


namespace IttyBitty
{
#pragma region LCD BIG FONT FLASH DATA TABLES

	PROGMEM CBYTE LCD_BIG_FONT_SHAPES[] =
	{
		// LT[8]
		0b00111, 0b01111, 0b11111, 0b11111, 0b11111, 0b11111, 0b11111, 0b11111,
		// UB[8]
		0b11111, 0b11111, 0b11111, 0b00000, 0b00000, 0b00000, 0b00000, 0b00000,
		// RT[8]
		0b11100, 0b11110, 0b11111, 0b11111, 0b11111, 0b11111, 0b11111, 0b11111,
		// LL[8]
		0b11111, 0b11111, 0b11111, 0b11111, 0b11111, 0b11111, 0b01111, 0b00111,
		// LB[8]
		0b00000, 0b00000, 0b00000, 0b00000, 0b00000, 0b11111, 0b11111, 0b11111,
		// LR[8]
		0b11111, 0b11111, 0b11111, 0b11111, 0b11111, 0b11111, 0b11110, 0b11100,
		// UMB[8]
		0b11111, 0b11111, 0b11111, 0b00000, 0b00000, 0b00000, 0b11111, 0b11111,
		// LMB[8]
		0b11111, 0b00000, 0b00000, 0b00000, 0b00000, 0b11111, 0b11111, 0b11111
	};

	PROGMEM CBYTE LCD_BIG_FONT_CHARACTERS[] =
	{
		(BF_WIDTH1_TABLE << 5) | 0,         // 0x20 (space)
		(BF_WIDTH1_TABLE << 5) | 1,         // 0x21 !
		(BF_WIDTH3_SYMBOLS_TABLE << 5) | 0, // 0x22 "
		BF_NOT_SUPPORTED,                   // 0x23 #
		BF_NOT_SUPPORTED,                   // 0x24 $
		BF_NOT_SUPPORTED,                   // 0x25 %
		BF_NOT_SUPPORTED,                   // 0x26 &
		(BF_WIDTH1_TABLE << 5) | 2,         // 0x27 '
		(BF_WIDTH1_TABLE << 5) | 3,         // 0x28 (
		(BF_WIDTH1_TABLE << 5) | 4,         // 0x29 )
		BF_NOT_SUPPORTED,                   // 0x2A *
		(BF_WIDTH3_SYMBOLS_TABLE << 5) | 1, // 0x2B +
		(BF_WIDTH1_TABLE << 5) | 5,         // 0x2C ,
		(BF_WIDTH2_TABLE << 5) | 0,         // 0x2D -
		(BF_WIDTH1_TABLE << 5) | 6,         // 0x2E .
		BF_NOT_SUPPORTED,                   // 0x2F /
		(BF_WIDTH3_TABLE << 5) | 0,         // 0x30 0
		(BF_WIDTH3_TABLE << 5) | 1,         // 0x31 1
		(BF_WIDTH3_TABLE << 5) | 2,         // 0x32 2
		(BF_WIDTH3_TABLE << 5) | 3,         // 0x33 3
		(BF_WIDTH3_TABLE << 5) | 4,         // 0x34 4
		(BF_WIDTH3_TABLE << 5) | 5,         // 0x35 5
		(BF_WIDTH3_TABLE << 5) | 6,         // 0x36 6
		(BF_WIDTH3_TABLE << 5) | 7,         // 0x37 7
		(BF_WIDTH3_TABLE << 5) | 8,         // 0x38 8
		(BF_WIDTH3_TABLE << 5) | 9,         // 0x39 9
		(BF_WIDTH1_TABLE << 5) | 7,         // 0x3A :
		(BF_WIDTH1_TABLE << 5) | 8,         // 0x3B ;
		BF_NOT_SUPPORTED,                   // 0x3C <
		(BF_WIDTH2_TABLE << 5) | 1,         // 0x3D =
		BF_NOT_SUPPORTED,					// 0x3E <
		(BF_WIDTH3_SYMBOLS_TABLE << 5) | 2, // 0x3F ?
		BF_NOT_SUPPORTED,                   // 0x40 @
		(BF_WIDTH3_TABLE << 5) | 10,        // 0x41 A
		(BF_WIDTH3_TABLE << 5) | 11,        // 0x42 B
		(BF_WIDTH3_TABLE << 5) | 12,        // 0x43 C
		(BF_WIDTH3_TABLE << 5) | 13,        // 0x44 D
		(BF_WIDTH3_TABLE << 5) | 14,        // 0x45 E
		(BF_WIDTH3_TABLE << 5) | 15,        // 0x46 F
		(BF_WIDTH3_TABLE << 5) | 16,        // 0x47 G
		(BF_WIDTH3_TABLE << 5) | 17,        // 0x48 H
		(BF_WIDTH3_TABLE << 5) | 18,        // 0x49 I
		(BF_WIDTH3_TABLE << 5) | 19,        // 0x4A J
		(BF_WIDTH3_TABLE << 5) | 20,        // 0x4B K
		(BF_WIDTH3_TABLE << 5) | 21,        // 0x4C L
		(BF_WIDTH5_TABLE << 5) | 0,         // 0x4D M
		(BF_WIDTH4_TABLE << 5) | 0,         // 0x4E N
		(BF_WIDTH3_TABLE << 5) | 0,         // 0x4F O; same as 0, so re-use
		(BF_WIDTH3_TABLE << 5) | 22,        // 0x50 P
		(BF_WIDTH4_TABLE << 5) | 1,         // 0x51 Q
		(BF_WIDTH3_TABLE << 5) | 23,        // 0x52 R
		(BF_WIDTH3_TABLE << 5) | 24,        // 0x53 S
		(BF_WIDTH3_TABLE << 5) | 25,        // 0x54 T
		(BF_WIDTH3_TABLE << 5) | 26,        // 0x55 U
		(BF_WIDTH4_TABLE << 5) | 2,         // 0x56 V
		(BF_WIDTH5_TABLE << 5) | 1,         // 0x57 W
		(BF_WIDTH3_TABLE << 5) | 27,        // 0x58 X
		(BF_WIDTH3_TABLE << 5) | 28,        // 0x59 Y
		(BF_WIDTH3_TABLE << 5) | 29         // 0x5A Z
	};

	PROGMEM CBYTE LCD_BIG_FONT_WIDTH1[] =
	{
		0x20, 0x20, // 0x20 space
		0x00, 0x04, // 0x21 !
		0x05, 0x20, // 0x27 '
		0x00, 0x03, // 0x28 (
		0x02, 0x05, // 0x29 )
		0x20, 0x05, // 0x2C ,
		0x20, 0x04, // 0x2E .
		0x6F, 0x6F, // 0x3A :
		0x01, 0x05  // 0x3B ;
	};

	PROGMEM CBYTE LCD_BIG_FONT_WIDTH2[] =
	{
		0x04, 0x04, 0x20, 0x20, // 0x2D -
		0x04, 0x04, 0x07, 0x07  // 0x3D =
	};

	PROGMEM CBYTE LCD_BIG_FONT_WIDTH3[] =
	{
		0x00, 0x01, 0x02, 0x03, 0x04, 0x05, // 0x30 0, 0x4F O
		0x01, 0x02, 0x20, 0x04, 0xFF, 0x04, // 0x31 1
		0x06, 0x06, 0x02, 0x03, 0x04, 0x04, // 0x32 2
		0x06, 0x06, 0x02, 0x04, 0x04, 0x05, // 0x33 3
		0x03, 0x04, 0x02, 0x20, 0x20, 0x05, // 0x34 4
		0xFF, 0x06, 0x06, 0x04, 0x04, 0x05, // 0x35 5
		0x00, 0x06, 0x06, 0x03, 0x04, 0x05, // 0x36 6
		0x01, 0x01, 0x02, 0x20, 0x00, 0x20, // 0x37 7
		0x00, 0x06, 0x02, 0x03, 0x04, 0x05, // 0x38 8
		0x00, 0x06, 0x02, 0x20, 0x20, 0x05, // 0x39 9
		0x00, 0x06, 0x02, 0xFF, 0x20, 0xFF, // 0x41 A
		0xFF, 0x06, 0x05, 0xFF, 0x07, 0x02, // 0x42 B
		0x00, 0x01, 0x01, 0x03, 0x04, 0x04, // 0x43 C
		0xFF, 0x01, 0x02, 0xFF, 0x04, 0x05, // 0x44 D
		0xFF, 0x06, 0x06, 0xFF, 0x07, 0x07, // 0x45 E
		0xFF, 0x06, 0x06, 0xFF, 0x20, 0x20, // 0x46 F
		0x00, 0x01, 0x01, 0x03, 0x04, 0x02, // 0x47 G
		0xFF, 0x04, 0xFF, 0xFF, 0x20, 0xFF, // 0x48 H
		0x01, 0xFF, 0x01, 0x04, 0xFF, 0x04, // 0x49 I
		0x20, 0x20, 0xFF, 0x04, 0x04, 0x05, // 0x4A J
		0xFF, 0x04, 0x05, 0xFF, 0x20, 0x02, // 0x4B K
		0xFF, 0x20, 0x20, 0xFF, 0x04, 0x04, // 0x4C L
		0x00, 0x06, 0x02, 0x03, 0x20, 0x20, // 0x50 P
		0x00, 0x06, 0x05, 0x03, 0x20, 0x02, // 0x52 R
		0x00, 0x06, 0x06, 0x07, 0x07, 0x05, // 0x53 S
		0x01, 0x02, 0x01, 0x20, 0x05, 0x20, // 0x54 T
		0x02, 0x20, 0x02, 0x03, 0x04, 0x05, // 0x55 U
		0x03, 0x04, 0x05, 0x00, 0x20, 0x02, // 0x58 X
		0x03, 0x04, 0x05, 0x20, 0x05, 0x20, // 0x59 Y
		0x01, 0x06, 0x05, 0x00, 0x07, 0x04  // 0x5A Z
	};

	PROGMEM CBYTE LCD_BIG_FONT_WIDTH3_SYMBOLS[] =
	{
		0x05, 0x20, 0x05, 0x20, 0x20, 0x20, // 0x22 "
		0x04, 0xFF, 0x04, 0x01, 0xFF, 0x01, // 0x2B +
		0x01, 0x06, 0x02, 0x20, 0x07, 0x20  // 0x3F ?
	};

	PROGMEM CBYTE LCD_BIG_FONT_WIDTH4[] =
	{
		0x00, 0x03, 0x20, 0x02, 0x03, 0x20, 0x02, 0x05, // 0x4E N
		0x00, 0x01, 0x02, 0x20, 0x03, 0x04, 0x03, 0x04, // 0x51 Q
		0x03, 0x20, 0x20, 0x05, 0x20, 0x03, 0x05, 0x20  // 0x56 V
	};

	PROGMEM CBYTE LCD_BIG_FONT_WIDTH5[] =
	{
		0x00, 0x01, 0x03, 0x01, 0x02, 0x03, 0x20, 0x20, 0x20, 0x05, // 0x4D M
		0x00, 0x20, 0x20, 0x20, 0x02, 0x03, 0x04, 0x00, 0x04, 0x05  // 0x57 W
	};

#pragma endregion
};

#endif	// #ifndef NO_ITTYBITTY_EXTENSIONS_BIG
